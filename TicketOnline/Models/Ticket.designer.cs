#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketOnline.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class TicketDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertPassenger(Passenger instance);
    partial void UpdatePassenger(Passenger instance);
    partial void DeletePassenger(Passenger instance);
    partial void InsertCoach(Coach instance);
    partial void UpdateCoach(Coach instance);
    partial void DeleteCoach(Coach instance);
    #endregion
		
		public TicketDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SticketContextConnection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TicketDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TicketDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TicketDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TicketDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<Passenger> Passengers
		{
			get
			{
				return this.GetTable<Passenger>();
			}
		}
		
		public System.Data.Linq.Table<Coach> Coaches
		{
			get
			{
				return this.GetTable<Coach>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PassengerId;
		
		private int _CoachId;
		
		private int _SeatId;
		
		private string _Status;
		
		private EntityRef<Passenger> _Passenger;
		
		private EntityRef<Coach> _Coach;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPassengerIdChanging(int value);
    partial void OnPassengerIdChanged();
    partial void OnCoachIdChanging(int value);
    partial void OnCoachIdChanged();
    partial void OnSeatIdChanging(int value);
    partial void OnSeatIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Ticket()
		{
			this._Passenger = default(EntityRef<Passenger>);
			this._Coach = default(EntityRef<Coach>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassengerId")]
		public int PassengerId
		{
			get
			{
				return this._PassengerId;
			}
			set
			{
				if ((this._PassengerId != value))
				{
					if (this._Passenger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPassengerIdChanging(value);
					this.SendPropertyChanging();
					this._PassengerId = value;
					this.SendPropertyChanged("PassengerId");
					this.OnPassengerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoachId", IsPrimaryKey=true)]
		public int CoachId
		{
			get
			{
				return this._CoachId;
			}
			set
			{
				if ((this._CoachId != value))
				{
					if (this._Coach.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCoachIdChanging(value);
					this.SendPropertyChanging();
					this._CoachId = value;
					this.SendPropertyChanged("CoachId");
					this.OnCoachIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatId", IsPrimaryKey=true)]
		public int SeatId
		{
			get
			{
				return this._SeatId;
			}
			set
			{
				if ((this._SeatId != value))
				{
					this.OnSeatIdChanging(value);
					this.SendPropertyChanging();
					this._SeatId = value;
					this.SendPropertyChanged("SeatId");
					this.OnSeatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passenger_Ticket", Storage="_Passenger", ThisKey="PassengerId", OtherKey="Id", IsForeignKey=true)]
		public Passenger Passenger
		{
			get
			{
				return this._Passenger.Entity;
			}
			set
			{
				Passenger previousValue = this._Passenger.Entity;
				if (((previousValue != value) 
							|| (this._Passenger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Passenger.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Passenger.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._PassengerId = value.Id;
					}
					else
					{
						this._PassengerId = default(int);
					}
					this.SendPropertyChanged("Passenger");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Coach_Ticket", Storage="_Coach", ThisKey="CoachId", OtherKey="Id", IsForeignKey=true)]
		public Coach Coach
		{
			get
			{
				return this._Coach.Entity;
			}
			set
			{
				Coach previousValue = this._Coach.Entity;
				if (((previousValue != value) 
							|| (this._Coach.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Coach.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Coach.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._CoachId = value.Id;
					}
					else
					{
						this._CoachId = default(int);
					}
					this.SendPropertyChanged("Coach");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class Passenger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _Phone;
		
		private string _Email;
		
		private System.Nullable<System.DateTime> _RegisterDate;
		
		private EntitySet<Ticket> _Tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhoneChanging(int value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnRegisterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRegisterDateChanged();
    #endregion
		
		public Passenger()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone")]
		public int Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisterDate")]
		public System.Nullable<System.DateTime> RegisterDate
		{
			get
			{
				return this._RegisterDate;
			}
			set
			{
				if ((this._RegisterDate != value))
				{
					this.OnRegisterDateChanging(value);
					this.SendPropertyChanging();
					this._RegisterDate = value;
					this.SendPropertyChanged("RegisterDate");
					this.OnRegisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passenger_Ticket", Storage="_Tickets", ThisKey="Id", OtherKey="PassengerId")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class Coach : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Type;
		
		private string _Router;
		
		private int _Id;
		
		private System.DateTime _StartDate;
		
		private string _StartHour;
		
		private int _NumberSeat;
		
		private EntitySet<Ticket> _Tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnRouterChanging(string value);
    partial void OnRouterChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnStartHourChanging(string value);
    partial void OnStartHourChanged();
    partial void OnNumberSeatChanging(int value);
    partial void OnNumberSeatChanged();
    #endregion
		
		public Coach()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Router", CanBeNull=false)]
		public string Router
		{
			get
			{
				return this._Router;
			}
			set
			{
				if ((this._Router != value))
				{
					this.OnRouterChanging(value);
					this.SendPropertyChanging();
					this._Router = value;
					this.SendPropertyChanged("Router");
					this.OnRouterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartHour", CanBeNull=false)]
		public string StartHour
		{
			get
			{
				return this._StartHour;
			}
			set
			{
				if ((this._StartHour != value))
				{
					this.OnStartHourChanging(value);
					this.SendPropertyChanging();
					this._StartHour = value;
					this.SendPropertyChanged("StartHour");
					this.OnStartHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberSeat")]
		public int NumberSeat
		{
			get
			{
				return this._NumberSeat;
			}
			set
			{
				if ((this._NumberSeat != value))
				{
					this.OnNumberSeatChanging(value);
					this.SendPropertyChanging();
					this._NumberSeat = value;
					this.SendPropertyChanged("NumberSeat");
					this.OnNumberSeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Coach_Ticket", Storage="_Tickets", ThisKey="Id", OtherKey="CoachId")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Coach = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Coach = null;
		}
	}
}
#pragma warning restore 1591
